# - Try to find @name@.
# Once done this will define the following variables:
#
#  @name@_FOUND              - If false, no @name@ headers were found.
#  @name@_VERSION_MAJOR      - The major version @name@ found.
#  @name@_VERSION_MINOR      - The minor version @name@ found.
#  @name@_VERSION_PATCH      - The patch version @name@ found.
#  @name@_VERSION_STRING     - The version string, i.e., major.minor.patch
#  @empty@                      format.
#
#  @name@_INCLUDE_DIRS       - List of include directories to add when compiling
#  @empty@                      code using @name@.
#
#  @name@_LIBRARIES          - List of @name@'s libraries.
#
#  @name@_SHARED_LIBRARIES   - List of @name@'s libraries as shared libraries.
#
#  @name@_STATIC_LIBRARIES   - List of @name@'s libraries as static libraries.
#
# You can set the following variables to aid in finding @name@:
#
#  @NAME@_EXPORT_DIR         - Hints for the path leading to the CMake export file.
#  @empty@                      e.g., /opt/@name@-1.0.0/lib/@name@, C:\@name@-1.0.0\lib\@name@
#
#  EXPORT_ROOT_DIR           - After @NAME@_EXPORT_DIR, we try:
#                               ${EXPORT_ROOT_DIR}/lib/@name@
#
#  @NAME@_EXPORT_FILENAME    - The base filename of the CMake export file.
#  @empty@                      e.g., Export@name@-1.cmake, Export@name@-1.0.0.cmake
#
# You may have multiple versions of @name@ installed. To select whichever one you
# are using, below is the recommended strategy:
#
# If you have installed @name@ to its own prefix, such as /opt/@name@-1.0:
# set @NAME@_EXPORT_DIR=/opt/@name@-1.0/lib/@name@. It will pick up the CMake export
# file at /opt/@name@-1.0/lib/@name@/Export@name@.cmake.
#
# If you have installed @name@ to a shared prefix, such as /usr/local:
# set @NAME@_EXPORT_DIR=/usr/local/lib/@name@
# set @NAME@_EXPORT_FILENAME=Export@name@-1.0.0.cmake
# or whatever version you require.
#
# CMake 2.6 module syntax is supported.
# i.e.,
#
#  find_package(@name@ [<major>[.<minor>[.<patch>]]] [EXACT]
#               [QUIET] [REQUIRED])
#
#

set(_p "@name@")
string(TOUPPER "${_p}" _P)

if(NOT ${_p}_FOUND)

set(${_p}_no_libs @no_libs@)
if(NOT ${_p}_no_libs)
    set(${_p}_default_lib_type "@default_lib_type@")
    set(${_p}_shared_libs @shared_libs@)
    set(${_p}_static_libs @static_libs@)
endif(NOT ${_p}_no_libs)
set(${_p}_config_header "@config_header@")

set(${_p}_found TRUE)

@macro_version_str@
macro(setu _varname)
    set("${_varname}" ${ARGN})
    string(TOUPPER "${_varname}" _varname_u)
    set("${_varname_u}" ${ARGN})
endmacro(setu _varname)
macro(m_check_version _proj _depname _foundvar)
    set(${_foundvar} TRUE)
    set(${_depname}_find_ver "${${_depname}_FIND_VERSION_MAJOR}")
    if(${_depname}_FIND_VERSION_MINOR)
        set(${_depname}_find_ver "${${_depname}_find_ver}.${${_depname}_FIND_VERSION_MINOR}")
        if(${_depname}_FIND_VERSION_PATCH)
            set(${_depname}_find_ver "${${_depname}_find_ver}.${${_depname}_FIND_VERSION_PATCH}")
        endif(${_depname}_FIND_VERSION_PATCH)
    endif(${_depname}_FIND_VERSION_MINOR)
    set(${_depname}_ver "${${_depname}_VERSION_STRING}")
    macro_version_cmp("${${_depname}_ver}" "${${_depname}_find_ver}" _cmp)
    if(${_depname}_FIND_VERSION_EXACT)
        if(NOT "${_cmp}" EQUAL "0")
            set("${_foundvar}" FALSE)
            message(STATUS "${_proj}: Exact version ${${_depname}_find_ver} required but version ${${_depname}_ver} found.")
        endif(NOT "${_cmp}" EQUAL "0")
    else(${_depname}_FIND_VERSION_EXACT)
        if("${_cmp}" EQUAL "-1")
            set("${_foundvar}" FALSE)
            message(STATUS "${_proj}: Version >= ${${_depname}_find_ver} required but version ${${_depname}_ver} found.")
        elseif("${_cmp}" EQUAL "1")
            if(NOT "${${_depname}_FIND_VERSION_MAJOR}" STREQUAL "${${_depname}_VERSION_MAJOR}")
                set("${_foundvar}" FALSE)
                message(STATUS "${_proj}: ${${_depname}_ver} is >= ${${_depname}_find_ver}, as required, but major versions ${${_depname}_VERSION_MAJOR} and ${${_depname}_FIND_VERSION_MAJOR} do not match.")
            endif(NOT "${${_depname}_FIND_VERSION_MAJOR}" STREQUAL "${${_depname}_VERSION_MAJOR}")
        endif("${_cmp}" EQUAL "-1")
    endif(${_depname}_FIND_VERSION_EXACT)
endmacro(m_check_version _proj _depname _foundvar)
macro(m_req_dep _name _depname _exactornot _ver _foundvar)
    macro_version_major_number("${_ver}" _major)
    macro_version_minor_number("${_ver}" _minor)
    macro_version_patch_number("${_ver}" _patch)
    set(${_foundvar} TRUE)
    if(NOT ${_depname}_FOUND)
        message(STATUS "${_name}: ${_depname}_FOUND=${${_depname}_FOUND}: ${_depname} is a required dependency for ${_name}.")
        set(${_foundvar} FALSE)
    else(NOT ${_depname}_FOUND)
        set(${_depname}_FIND_VERSION_MAJOR "${_major}")
        set(${_depname}_FIND_VERSION_MINOR "${_minor}")
        set(${_depname}_FIND_VERSION_PATCH "${_patch}")
        set(${_depname}_FIND_VERSION_EXACT FALSE)
        if("${_exactornot}" STREQUAL "EXACT")
            set(${_depname}_FIND_VERSION_EXACT TRUE)
        endif("${_exactornot}" STREQUAL "EXACT")
        m_check_version("${_p}" "${_depname}" "${_foundvar}")
    endif(NOT ${_depname}_FOUND)
    if(NOT "${_foundvar}")
        set(${_proj}_found FALSE)
    endif(NOT "${_foundvar}")
endmacro(m_req_dep _name _depname _exactornot _ver _foundvar)
macro(m_log_var)
    foreach(_i ${ARGN})
        message(STATUS "${_i}=${${_i}}")
    endforeach(_i ${ARGN})
endmacro(m_log_var)

@deps_code@

set(generic_export_dir)
if(NOT "${EXPORT_ROOT_DIR}" STREQUAL "")
    set(generic_export_dir "${EXPORT_ROOT_DIR}/lib/${_p}")
endif(NOT "${EXPORT_ROOT_DIR}" STREQUAL "")
set(${_p}_export_dir
${${_P}_EXPORT_DIR}
$ENV{${_P}_EXPORT_DIR}
${generic_export_dir}
"/usr/local/lib/${_p}"
"/usr/lib/${_p}"
"/opt/${_p}/lib/${_p}"
"C:\\${_p}\\lib\\${_p}"
"C:\\Program Files\\${_p}\\lib\\${_p}"
)

set(${_p}_export_filename "$ENV{${_P}_EXPORT_FILENAME}")
if(NOT "${${_P}_EXPORT_FILENAME}" STREQUAL "")
    set(${_p}_export_filename "${${_P}_EXPORT_FILENAME}")
endif(NOT "${${_P}_EXPORT_FILENAME}" STREQUAL "")
if(NOT ${_p}_export_filename)
    set(${_p}_export_filename "Export${_p}.cmake")
endif(NOT ${_p}_export_filename)

if(${_p}_export_dir)
    find_file(${_p}_EXPORT "${${_p}_export_filename}"
      HINTS ${${_p}_export_dir}
    )
else(${_p}_export_dir)
    find_file(${_p}_EXPORT "${${_p}_export_filename}")
endif(${_p}_export_dir)
set(${_P}_EXPORT "${${_p}_EXPORT}")

if(${_p}_EXPORT)
    include(${${_p}_EXPORT})
    set(${_P}_INCLUDE_DIRS ${${_p}_INCLUDE_DIRS})
    if(NOT ${_p}_no_libs)
        setu(${_p}_LIBRARIES ${${_p}_LIBRARIES} ${_p}_export_${_p}${${_p}_default_lib_type})
        setu(${_p}_LIBRARY ${${_p}_LIBRARIES})
        if(${_p}_shared_libs)
            setu(${_p}_SHARED_LIBRARIES ${${_p}_SHARED_LIBRARIES} ${_p}_export_${_p}_shared)
            setu(${_p}_SHARED_LIBRARY ${${_p}_SHARED_LIBRARIES})
        endif(${_p}_shared_libs)
        if(${_p}_static_libs)
            setu(${_p}_STATIC_LIBRARIES ${${_p}_STATIC_LIBRARIES} ${_p}_export_${_p}_static)
            setu(${_p}_STATIC_LIBRARY ${${_p}_STATIC_LIBRARIES})
        endif(${_p}_static_libs)
    endif(NOT ${_p}_no_libs)
    find_file(${_p}_config_h "${_p}/${${_p}_config_header}"
        HINTS ${${_p}_INCLUDE_DIRS}
    )
    if(${_p}_config_h)
        file(STRINGS "${${_p}_config_h}" ${_p}_config_h_strings)
        foreach(_l ${${_p}_config_h_strings})
            string(REGEX
                MATCH "^#[ \t]*define[ \t]+${_P}_VERSION_STR[ \t]+\"(.*)\""
                ${_p}_version_match "${_l}"
            )
            if(${_p}_version_match)
                break()
            endif(${_p}_version_match)
        endforeach(_l ${${_p}_config_h_strings})
        if(${_p}_version_match)
            string(REGEX REPLACE ".*\"(.*)\".*" "\\1" ${_p}_version "${${_p}_version_match}")
            string(REGEX REPLACE "^([0-9]+)\\.[0-9]+\\.[0-9]+$"
                "\\1" ${_p}_VERSION_MAJOR "${${_p}_version}")
            string(REGEX REPLACE "^[0-9]+\\.([0-9]+)\\.[0-9]+$"
                "\\1" ${_p}_VERSION_MINOR "${${_p}_version}")
            string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.([0-9]+)$"
                "\\1" ${_p}_VERSION_PATCH "${${_p}_version}")
            set(${_p}_VERSION_STRING "${${_p}_VERSION_MAJOR}.${${_p}_VERSION_MINOR}.${${_p}_VERSION_PATCH}")
        else(${_p}_version_match)
            message(STATUS "${_p}: Could not read version number from ${_p}/config.h")
            set(${_p}_found FALSE)
        endif(${_p}_version_match)
    else(${_p}_config_h)
        message(STATUS "${_p}: Could not find header file: ${_p}/config.h")
        set(${_p}_found FALSE)
    endif(${_p}_config_h)

    if(${_p}_FIND_VERSION)
        m_check_version("${_p}" "${_p}" "${_p}_found")
    endif(${_p}_FIND_VERSION)

    if(${_p}_no_libs)
        if(${_p}_INCLUDE_DIRS AND ${_p}_found)
            setu(${_p}_FOUND TRUE)
        endif(${_p}_INCLUDE_DIRS AND ${_p}_found)
    else(${_p}_no_libs)
        if(${_p}_INCLUDE_DIRS AND ${_p}_LIBRARIES AND ${_p}_found)
            setu(${_p}_FOUND TRUE)
        endif(${_p}_INCLUDE_DIRS AND ${_p}_LIBRARIES AND ${_p}_found)
    endif(${_p}_no_libs)
else(${_p}_EXPORT)
    message(STATUS "${_p}: Could not find ${${_p}_export_filename}")
    set(${_p}_found FALSE)
endif(${_p}_EXPORT)

endif(NOT ${_p}_FOUND)

if (${_p}_FOUND)
  if (NOT ${_p}_FIND_QUIETLY)
    if(${_p}_no_libs)
      message(STATUS "${_p}: Found ${_p} ${${_p}_VERSION_STRING}: INLCUDE_DIRS=${${_p}_INCLUDE_DIRS}")
    else(${_p}_no_libs)
      message(STATUS "${_p}: Found ${_p} ${${_p}_VERSION_STRING}: INLCUDE_DIRS=${${_p}_INCLUDE_DIRS} LIBRARIES=${${_p}_LIBRARIES}")
    endif(${_p}_no_libs)
  endif (NOT ${_p}_FIND_QUIETLY)
else (${_p}_FOUND)
  if (${_p}_FIND_REQUIRED)
    message(SEND_ERROR "${_p}: Not found or failure in requirements.")
  endif (${_p}_FIND_REQUIRED)
endif (${_p}_FOUND)


